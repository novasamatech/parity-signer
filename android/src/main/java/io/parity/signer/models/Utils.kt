package io.parity.signer.models

import android.graphics.BitmapFactory
import android.util.Log
import androidx.compose.ui.graphics.ImageBitmap
import androidx.compose.ui.graphics.asImageBitmap
import io.parity.signer.uniffi.SignerImage

typealias Callback = () -> Unit



/**
 * Decodes from hex string into number array
 */
fun String.decodeHex(): ByteArray {
	return chunked(2).map { it.toInt(16).toByte() }.toByteArray()
}

/**
 * Replace middle of long string with "..."
 * length: number of symbols to keep on either side
 * if message is too short, does not modify it
 */
fun String.abbreviateString(length: Int): String {
	return if (this.length > length * 2) {
		this.substring(0, length) + "..." + this.substring(
			this.length - length,
			this.length
		)
	} else {
		this
	}
}
const val BASE58_STYLE_ABBREVIATE = 8

/**
 * Encodes number array into string
 */
fun ByteArray.encodeHex(): String {
	return this.joinToString(separator = "") { byte -> "%02x".format(byte) }
}

/**
 * Specialized tool to decode png images generated by rust code
 */
@ExperimentalUnsignedTypes
fun List<UByte>.intoImageBitmap(): ImageBitmap {
	val picture = this.toUByteArray().toByteArray()
	return try {
		BitmapFactory.decodeByteArray(picture, 0, picture.size).asImageBitmap()
	} catch (e: java.lang.Exception) {
		Log.d("image decoding error", e.toString())
		ImageBitmap(1, 1)
	}
}
